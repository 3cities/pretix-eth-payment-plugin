{"version":3,"file":"web3modal.2795191f86467358a545.js","mappings":"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","sources":["webpack://web3modal_todo_rename/./src/interface.js","webpack://web3modal_todo_rename/./src/periodic_check.js","webpack://web3modal_todo_rename/./src/core.js","webpack://web3modal_todo_rename/./src/web3modal.js"],"sourcesContent":["\"use strict\";\n\nconst GlobalPretixEthState = {\n    paymentDetails: null,\n    // payment flow flags\n    transactionHashSubmitted: false,\n    lastOrderStatus: '',\n    // interface and data-bearing tags\n    elements: {\n        divError: document.getElementById(\"message-error\"),\n        divSuccess: document.getElementById(\"success\"),\n        divTransactionHash: document.getElementById(\"pretix-eth-transaction-hash\"),\n        aOrderDetailURL: document.getElementById(\"pretix-order-detail-url\"),\n        buttonPay: document.getElementById(\"btn-pay\"),\n        submittedTransactionHash: document.getElementById(\"pretix-eth-submitted-transaction-hash\"),\n    },\n    selectors: {\n        paymentSteps: document.querySelectorAll(\".pretix-eth-payment-steps\")\n    },\n}\n\nfunction getTransactionDetailsURL() {\n    return GlobalPretixEthState.elements.buttonPay.getAttribute(\"data-transaction-details-url\");\n}\n\nasync function getPaymentTransactionData(refresh = false) {\n    if (!refresh && GlobalPretixEthState.paymentDetails !== null) {\n        return GlobalPretixEthState.paymentDetails\n    }\n\n    const response = await fetch(getTransactionDetailsURL());\n\n    if (response.status >= 400) { // TODO should this be `if response.status is not 2xx`?\n        throw \"Failed to fetch order details. If this problem persists, please contact the organizer directly.\";\n    }\n\n    return await response.json();\n}\n\nfunction getCookie(name) {\n    // Add the = sign\n    name = name + '=';\n\n    // Get the decoded cookie\n    const decodedCookie = decodeURIComponent(document.cookie);\n\n    // Get all cookies, split on ; sign\n    const cookies = decodedCookie.split(';');\n\n    // Loop over the cookies\n    for (let i = 0; i < cookies.length; i++) {\n        // Define the single cookie, and remove whitespace\n        const cookie = cookies[i].trim();\n\n        // If this cookie has the name of what we are searching\n        if (cookie.indexOf(name) == 0) {\n            // Return everything after the cookies name\n            return cookie.substring(name.length, cookie.length);\n        }\n    }\n}\n\n/*\n* Success and error handling\n*/\nfunction showError(message = '', reset_state = true) {\n    if (GlobalPretixEthState.transactionHashSubmitted) {\n        // do not display errors or reset state after the transaction hash has been successfully submitted to the BE\n        message = \"\";\n        reset_state = false;\n    } else {\n        if (typeof message === \"object\") {\n            if (message.data && message.data.message) {\n                message = message.data.message + \". Please try again.\"\n            } else if (message.message !== undefined) {\n                message = message.message + \". Please try again.\"\n            } else if (message.error !== undefined && message.error.message !== undefined) {\n                message = message.error.message + \". Please try again.\";\n            } else {\n                message = \"\";\n            }\n        }\n        if (message === \"\") {\n            message = \"There was an error, please try again, or contact support if you have already confirmed a payment in your wallet provider.\"\n        }\n    }\n\n    GlobalPretixEthState.elements.divError.innerHTML = message;\n\n    if (reset_state === true) {\n        displayOnlyId(\"pay\");\n    }\n    try {\n        GlobalPretixEthState.elements.buttonPay.removeAttribute(\"disabled\");\n    } catch (e) {\n        return false\n    }\n\n    return false\n}\n\nfunction resetErrorMessage() {\n    GlobalPretixEthState.elements.divError.innerHTML = '';\n}\n\nfunction displayOnlyId(divId) {\n    GlobalPretixEthState.selectors.paymentSteps.forEach(\n        function (div) {\n            if (div.id === divId) {\n                div.style.display = \"block\";\n            } else {\n                div.style.display = \"none\";\n            }\n        }\n    );\n}\n\nfunction showSuccessMessage(paymentDetails) {\n    GlobalPretixEthState.transactionHashSubmitted = true;\n    GlobalPretixEthState.elements.divTransactionHash.innerHTML = `${paymentDetails.transactionHash} (chain ID ${paymentDetails.chainId})`; // TODO final rendering of payment details. Can we show block explorer link passed from 3c here?\n    displayOnlyId();\n    GlobalPretixEthState.elements.divSuccess.style.display = \"block\";\n}\n\nexport {\n    GlobalPretixEthState, displayOnlyId, getCookie, getPaymentTransactionData, getTransactionDetailsURL, resetErrorMessage, showError, showSuccessMessage\n};\n","import { getCookie, GlobalPretixEthState } from \"./interface.js\";\n\n// periodicCheck monitors for an existing unconfirmed payment to become\n// confirmed and when it does, reload the page to render with fresh\n// confirmation state.\nasync function periodicCheck() {\n    let url = GlobalPretixEthState.elements.aOrderDetailURL.getAttribute(\"data-order-detail-url\");\n    const csrf_cookie = getCookie('pretix_csrftoken')\n\n    let response = await fetch(url, {\n        headers: {\n            'X-CSRF-TOKEN': csrf_cookie,\n            'HTTP-X-CSRFTOKEN': csrf_cookie,\n        }\n    });\n\n    if (response.ok) {\n        let data = await response.json()\n        if (GlobalPretixEthState.lastOrderStatus === '') {\n            GlobalPretixEthState.lastOrderStatus = data.status;\n        } else if (GlobalPretixEthState.lastOrderStatus !== data.status) {\n            // status has changed to PAID\n            if (data.status === 'p') {\n                location.reload();\n            }\n        }\n    }\n}\n\nasync function runPeriodicCheck() {\n    while (true) {\n        try {\n            await periodicCheck();\n        } catch (e) { }\n        await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n}\n\nexport { runPeriodicCheck };\n","\"use strict\";\n\nimport {\n    GlobalPretixEthState,\n    getCookie,\n    getPaymentTransactionData,\n    getTransactionDetailsURL,\n    resetErrorMessage,\n    showError,\n    showSuccessMessage\n} from './interface.js';\nimport { runPeriodicCheck } from './periodic_check.js';\n\n// TODO doc\nlet singleton3citiesIframeMessageEventHandler = undefined;\nfunction createOrUpdateSingleton3citiesIframeMessageEventHandler({ tcOrigin, onCheckout, onCloseIframe }) {\n    if (singleton3citiesIframeMessageEventHandler) {\n        window.removeEventListener('message', singleton3citiesIframeMessageEventHandler, true);\n        singleton3citiesIframeMessageEventHandler = undefined;\n    }\n\n    singleton3citiesIframeMessageEventHandler = (event) => {\n        if (event.origin === tcOrigin) { // WARNING this is a crucial security check to ensure that this message has been sent from the expected 3cities iframe origin. Otherwise, any window can claim to be sending a message from 3cities\n            if (event !== null && typeof event === 'object' && event.data !== null && typeof event.data === 'object') {\n                if (event.data.kind === 'Checkout') onCheckout(event.data);\n                else if (event.data.kind === 'CloseIframe') onCloseIframe();\n                else console.error(\"Unexpected kind of event from 3cities, kind=\", event.data.kind);\n            } else console.error(\"Unexpected event from 3cities\", event);\n        }\n    };\n    window.addEventListener('message', singleton3citiesIframeMessageEventHandler, true);\n}\n\nfunction make3citiesIframe({\n    tcBaseUrl, // string. 3cities client base URL. TODO enumerate the checkout data that currently must be included in the base url vs. those supplied below as url params\n    paymentLogicalAssetAmountInUsd, // string. 18 decimal full precision US Dollar amount due for this payment. Ie. `$1 = (10**18).toString()`\n    onCheckout, // callback to invoke on 3cities Checkout event. See below for signature type\n}) {\n    const tcIframeContainerId = \"3cities-iframe-container\";\n\n    createOrUpdateSingleton3citiesIframeMessageEventHandler({\n        tcOrigin: new URL(tcBaseUrl).origin,\n        onCheckout,\n        onCloseIframe: () => { removeElementById(tcIframeContainerId); },\n    })\n\n    // TODO create a real 3cities SDK that configures these options, generates the final 3cities URL, and instantiates/styles the iframe\n\n    // BEGIN - mock 3cities options to later be migrated to SDK\n    // TODO pass ethusd exchange rate to 3cities to override 3cities' own internal exchange rate engine with the user's guaranteed rate determined internally by pretix\n    // TODO set 3cities SDK receiver address from GlobalPretixEthState.paymentDetails['recipient_address'] and also support an optionally distinct receiver address per chain --> WARNING, right now, the configured receiver address in pretix-eth (ie. globalPretixEthState.paymentDetails['recipient_address']) must coincidentally be the same value as the receiver address baked into the 3cities base URL\n    const requireInIframeOrErrorWith = 'Standalone page detected. Please use the \"Click here to pay\" pop-up in Pretix'; // require 3cities to be embedded as an iframe by way of refusing to proceed with payment unless a parent window is detected. For pretix-eth, this prevents payments from occurring in a context where the pretix web client ends up not being the parent window and thus can't receive the user's signature and transaction details via window.parent.postMessage. For example, some wallet connection libraries can cause the 3cities iframe to be opened in a new browser; instead, the user should open the pretix web app in the new browser --> TODO instead of just error msg, optionally allow a redirect URL (\"You need to pay inside Pretix. Redirecting you automatically back to pretex... click here if it doesn't happen\")\n    const requireIframeParentOrigin = window.location.origin; // iff defined, if 3cities calls window.parent.postMessage, then 3cities will require that the window receiving the message has this origin. In practice, this means that only this window may receive the user's signature and transaction details when 3cities calls postMessage\n    const verifyAddressOwnership = { // iff this config object is defined, 3cities will ask the user for a CAIP-222-style signature to verify their ownership of the connected wallet address prior to checking out. This signature can then be obtained from the 3cities iframe by way of window.parent.postMessage and, in future, via webhooks and/or redirect URL params\n        verifyEip1271Signature: true, // iff this is true, 3cities will attempt to detect if the user's conected address is a smart contract wallet, and if this is detected, 3cities will verify the signature by requiring an isValidSignature call to return true before allowing payment to proceed. While this clientside call to isValidSignature is insecure from the point of view of the serverside verifier, in practice, this can help prevent a user from paying with a wallet whose ownership signature can't later be verified by the serverside verifier. If user's connected address is a counterfactually instantiated smart contract wallet, then it'll appear to be an EOA to the 3cities iframe and this verification will be skipped prior to payment. However, after payment, the serverside verifier may optionally detect this address as a smart contract wallet and verify the eip1271 signature at that point\n    };\n    // END - mock 3cities options to later be migrated to SDK\n\n    const computedThreeCitiesUrl = (() => {\n        // today, tcBaseUrl is expected to be of the form `#/?pay=...` ie. having synthetic URL parameters as part of the hash fragment. As a result, we can't use the browser URL API to append search parameters as this api isn't designed to recognize our synthetic search parameters in the hash fragment. Instead, we apply new search params using array-based string manipulation:\n        const urlParts = [tcBaseUrl];\n        urlParts.push(`&amount=${paymentLogicalAssetAmountInUsd}`);\n        if (requireInIframeOrErrorWith) urlParts.push(`&requireInIframeOrErrorWith=${encodeURIComponent(requireInIframeOrErrorWith)}`);\n        if (requireIframeParentOrigin) urlParts.push(`&requireIframeParentOrigin=${encodeURIComponent(requireIframeParentOrigin)}`)\n        if (verifyAddressOwnership) {\n            urlParts.push('&verifyAddressOwnership=1');\n            if (verifyAddressOwnership.verifyEip1271Signature) urlParts.push('&verifyEip1271Signature=1');\n        }\n        const url = urlParts.join('');\n        return url;\n    })();\n    makeIframeModal(tcIframeContainerId, computedThreeCitiesUrl);\n\n    function removeElementById(id) {\n        const el = document.getElementById(id);\n        if (el) el.remove();\n    }\n\n    function makeIframeModal(iframeContainerId, url) {\n        // WARNING this unreadable code is a 1-liner generated by 3cities \"HTML embed\" feature and is intended to be a temporary solution for an iframe modal. TODO replace this with an iframe created internally in a real 3cities SDK\n        (function () { let m = document.createElement('div'); m.id = iframeContainerId; m.style = 'position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,0.5);z-index:9999;display:flex;align-items:center;justify-content:center;'; m.onclick = function (e) { if (e.target === m) { removeModal(); } }; let removeModal = function () { if (document.body.contains(m)) { document.body.removeChild(m); document.removeEventListener('keydown', escListener); } }; let escListener = function (e) { if (e.key === 'Escape') { removeModal(); } }; document.addEventListener('keydown', escListener); let mc = document.createElement('div'); let maxWidth = window.innerWidth < 420 ? (window.innerWidth - 30) + 'px' : '390px'; mc.style = 'background-color:#f1f1f1;padding:8px;width:100%;max-width:' + maxWidth + ';height:95vh;max-height:1024px;border-radius:10px;position:relative;box-shadow:0 4px 6px rgba(0,0,0,0.1), 0 2px 4px rgba(0,0,0,0.06);margin:auto;'; let i = document.createElement('iframe'); i.style = 'width:100%;height:100%;border:0;'; i.src = url; let c = document.createElement('div'); c.style = 'position:absolute;top:5px;right:5px;width:24px;height:24px;cursor:pointer;z-index:10;'; c.innerHTML = '<svg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 20 20\\' fill=\\'currentColor\\' style=\\'width:100%;height:100%;\\'><path fill-rule=\\'evenodd\\' clip-rule=\\'evenodd\\' d=\\'M10 9.293l5.146-5.147a.5.5 0 01.708.708L10.707 10l5.147 5.146a.5.5 0 01-.708.708L10 10.707l-5.146 5.147a.5.5 0 01-.708-.708L9.293 10 4.146 4.854a.5.5 0 11.708-.708L10 9.293z\\'></path></svg>'; c.onclick = function () { removeModal(); }; mc.appendChild(i); mc.appendChild(c); m.appendChild(mc); document.body.appendChild(m); })();\n    }\n}\n\n// TODO doc\nasync function makePayment() {\n    async function _tryToStartPaymentFlow() {\n        // refresh paymentDetails in case account has changed\n        GlobalPretixEthState.paymentDetails = await getPaymentTransactionData(true);\n\n        if (GlobalPretixEthState.paymentDetails['is_signature_submitted'] === true) {\n            showError(\"It seems that you have paid for this order already.\");\n            return;\n        }\n\n        // WARNING the value 'has_other_unpaid_orders' is true iff the user's sender address has signed messages for other unpaid orders (see retrieve() in views.py). However, with 3cities, we aren't able to construct this value because the user's sender address is hidden inside the iframe (and not yet connected at this point in the payment flow). So, this check has been dropped. TODO what's the impact here? --> rm this code?\n        // if (GlobalPretixEthState.paymentDetails['has_other_unpaid_orders'] === true) {\n        //     showError(\"Please wait for other payments from your wallet to be confirmed before submitting another transaction.\")\n        //     return;\n        // }\n\n        make3citiesIframe({\n            tcBaseUrl: 'http://localhost:3000/#/pay?c=CAESFKwNd1PqKBZQG1f66a1mVzkBg4SzIgICASoCARJaDkRldmNvbiB0aWNrZXRz', // TODO source this securely from server config\n            paymentLogicalAssetAmountInUsd: GlobalPretixEthState.paymentDetails['amount'],\n            onCheckout: submitPaymentDetailsToServer,\n        });\n    }\n\n    resetErrorMessage();\n\n    try {\n        await _tryToStartPaymentFlow();\n    } catch (error) {\n        console.error('Pay flow error:', error);\n        showError(error, true);\n    }\n}\n\nasync function submitPaymentDetailsToServer(paymentDetails) {\n    /*\n    NB type of message sent from 3cities upon successful checkout:\n    {\n        kind: 'Checkout';\n        signature: string;\n        message: {\n            senderAddress: `0x${string}`;\n        };\n        transactionHash: string;\n        chainId: number;\n    }\n    */\n\n    async function _submitPaymentDetailsToServer(paymentDetails) {\n        const csrf_cookie = getCookie('pretix_csrftoken')\n        const url = getTransactionDetailsURL();\n        const searchParams = new URLSearchParams({\n            csrfmiddlewaretoken: csrf_cookie,\n            senderAddress: paymentDetails.message.senderAddress, // we extract senderAddress and send it separately because the backend wants senderAddress as structured data but the type of `message` is opaque to the backend (ie. the backend treats `message` as a blob)\n            signature: paymentDetails.signature,\n            message: JSON.stringify(paymentDetails.message),\n            transactionHash: paymentDetails.transactionHash,\n            chainId: paymentDetails.chainId,\n        });\n        fetch(url, {\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                'X-CSRF-TOKEN': csrf_cookie,\n                'HTTP-X-CSRFTOKEN': csrf_cookie,\n            },\n            method: 'POST',\n            body: searchParams,\n        }).then(async (response) => {\n            if (response.ok) {\n                showSuccessMessage(paymentDetails);\n                await runPeriodicCheck();\n            } else {\n                showError(`There was an error processing your payment, please contact support. Your payment was sent in transaction ${paymentDetails.transactionHash} on chainId ${paymentDetails.chainId}.`, false);\n            }\n        })\n    }\n    try {\n        await _submitPaymentDetailsToServer(paymentDetails);\n    } catch (error) {\n        showError(error, true);\n    }\n}\n\nexport { makePayment };\n","\"use strict\";\n\n// TODO rename this file to something-not-web3modal\n\nimport { makePayment } from './core.js';\n\nasync function init() {\n    document.title = 'Pretix Payment'; // some wallets read the page title and presents it to the user in the wallet - the pretix generated one looks confusing, so we override it\n    document.getElementById('spinner').style.display = 'none';\n    const payButton = document.getElementById('btn-pay');\n    if (payButton) payButton.addEventListener('click', makePayment);\n    else console.error('No pay button found');\n}\n\ninit();\n"],"names":["GlobalPretixEthState","paymentDetails","transactionHashSubmitted","lastOrderStatus","elements","divError","document","getElementById","divSuccess","divTransactionHash","aOrderDetailURL","buttonPay","submittedTransactionHash","selectors","paymentSteps","querySelectorAll","getTransactionDetailsURL","getAttribute","getCookie","name","cookies","decodeURIComponent","cookie","split","i","length","trim","indexOf","substring","showError","message","reset_state","data","undefined","error","innerHTML","displayOnlyId","removeAttribute","e","divId","forEach","div","id","style","display","async","periodicCheck","url","csrf_cookie","response","fetch","headers","ok","json","status","location","reload","singleton3citiesIframeMessageEventHandler","makePayment","refresh","getPaymentTransactionData","tcBaseUrl","paymentLogicalAssetAmountInUsd","onCheckout","tcIframeContainerId","tcOrigin","onCloseIframe","window","removeEventListener","event","origin","kind","console","addEventListener","createOrUpdateSingleton3citiesIframeMessageEventHandler","URL","el","remove","removeElementById","requireInIframeOrErrorWith","requireIframeParentOrigin","verifyAddressOwnership","verifyEip1271Signature","computedThreeCitiesUrl","urlParts","push","encodeURIComponent","join","iframeContainerId","m","createElement","onclick","target","removeModal","body","contains","removeChild","escListener","key","mc","maxWidth","innerWidth","src","c","appendChild","make3citiesIframe","submitPaymentDetailsToServer","_tryToStartPaymentFlow","searchParams","URLSearchParams","csrfmiddlewaretoken","senderAddress","signature","JSON","stringify","transactionHash","chainId","method","then","showSuccessMessage","Promise","resolve","setTimeout","runPeriodicCheck","_submitPaymentDetailsToServer","title","payButton","init"],"sourceRoot":""}